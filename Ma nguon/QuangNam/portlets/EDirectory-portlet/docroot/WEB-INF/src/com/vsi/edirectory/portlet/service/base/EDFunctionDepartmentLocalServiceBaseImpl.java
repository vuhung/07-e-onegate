/**
 * Copyright (c) 2000-2011 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.vsi.edirectory.portlet.service.base;

import com.liferay.counter.service.CounterLocalService;

import com.liferay.portal.kernel.annotation.BeanReference;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.service.ResourceLocalService;
import com.liferay.portal.service.ResourceService;
import com.liferay.portal.service.UserLocalService;
import com.liferay.portal.service.UserService;
import com.liferay.portal.service.persistence.ResourcePersistence;
import com.liferay.portal.service.persistence.UserPersistence;

import com.vsi.edirectory.portlet.model.EDFunctionDepartment;
import com.vsi.edirectory.portlet.service.EDDepartmentLocalService;
import com.vsi.edirectory.portlet.service.EDDepartmentService;
import com.vsi.edirectory.portlet.service.EDEmployeeLocalService;
import com.vsi.edirectory.portlet.service.EDEmployeeService;
import com.vsi.edirectory.portlet.service.EDFunctionDepartmentLocalService;
import com.vsi.edirectory.portlet.service.EDFunctionDepartmentService;
import com.vsi.edirectory.portlet.service.EDFunctionEmployeeLocalService;
import com.vsi.edirectory.portlet.service.EDFunctionEmployeeService;
import com.vsi.edirectory.portlet.service.EDFunctionLocalService;
import com.vsi.edirectory.portlet.service.EDFunctionService;
import com.vsi.edirectory.portlet.service.persistence.EDDepartmentPersistence;
import com.vsi.edirectory.portlet.service.persistence.EDEmployeeFinder;
import com.vsi.edirectory.portlet.service.persistence.EDEmployeePersistence;
import com.vsi.edirectory.portlet.service.persistence.EDFunctionDepartmentPersistence;
import com.vsi.edirectory.portlet.service.persistence.EDFunctionEmployeePersistence;
import com.vsi.edirectory.portlet.service.persistence.EDFunctionPersistence;

import java.util.List;

import javax.sql.DataSource;

/**
 * The base implementation of the e d function department local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.vsi.edirectory.portlet.service.impl.EDFunctionDepartmentLocalServiceImpl}.
 * </p>
 *
 * <p>
 * Never modify or reference this class directly. Always use {@link com.vsi.edirectory.portlet.service.EDFunctionDepartmentLocalServiceUtil} to access the e d function department local service.
 * </p>
 *
 * @author vinhnt
 * @see com.vsi.edirectory.portlet.service.impl.EDFunctionDepartmentLocalServiceImpl
 * @see com.vsi.edirectory.portlet.service.EDFunctionDepartmentLocalServiceUtil
 * @generated
 */
public abstract class EDFunctionDepartmentLocalServiceBaseImpl
	implements EDFunctionDepartmentLocalService {
	/**
	 * Adds the e d function department to the database. Also notifies the appropriate model listeners.
	 *
	 * @param edFunctionDepartment the e d function department to add
	 * @return the e d function department that was added
	 * @throws SystemException if a system exception occurred
	 */
	public EDFunctionDepartment addEDFunctionDepartment(
		EDFunctionDepartment edFunctionDepartment) throws SystemException {
		edFunctionDepartment.setNew(true);

		return edFunctionDepartmentPersistence.update(edFunctionDepartment,
			false);
	}

	/**
	 * Creates a new e d function department with the primary key. Does not add the e d function department to the database.
	 *
	 * @param id the primary key for the new e d function department
	 * @return the new e d function department
	 */
	public EDFunctionDepartment createEDFunctionDepartment(long id) {
		return edFunctionDepartmentPersistence.create(id);
	}

	/**
	 * Deletes the e d function department with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param id the primary key of the e d function department to delete
	 * @throws PortalException if a e d function department with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	public void deleteEDFunctionDepartment(long id)
		throws PortalException, SystemException {
		edFunctionDepartmentPersistence.remove(id);
	}

	/**
	 * Deletes the e d function department from the database. Also notifies the appropriate model listeners.
	 *
	 * @param edFunctionDepartment the e d function department to delete
	 * @throws SystemException if a system exception occurred
	 */
	public void deleteEDFunctionDepartment(
		EDFunctionDepartment edFunctionDepartment) throws SystemException {
		edFunctionDepartmentPersistence.remove(edFunctionDepartment);
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query to search with
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return edFunctionDepartmentPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query to search with
	 * @param start the lower bound of the range of model instances to return
	 * @param end the upper bound of the range of model instances to return (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return edFunctionDepartmentPersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query to search with
	 * @param start the lower bound of the range of model instances to return
	 * @param end the upper bound of the range of model instances to return (not inclusive)
	 * @param orderByComparator the comparator to order the results by
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return edFunctionDepartmentPersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Counts the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query to search with
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
		throws SystemException {
		return edFunctionDepartmentPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Gets the e d function department with the primary key.
	 *
	 * @param id the primary key of the e d function department to get
	 * @return the e d function department
	 * @throws PortalException if a e d function department with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	public EDFunctionDepartment getEDFunctionDepartment(long id)
		throws PortalException, SystemException {
		return edFunctionDepartmentPersistence.findByPrimaryKey(id);
	}

	/**
	 * Gets a range of all the e d function departments.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set.
	 * </p>
	 *
	 * @param start the lower bound of the range of e d function departments to return
	 * @param end the upper bound of the range of e d function departments to return (not inclusive)
	 * @return the range of e d function departments
	 * @throws SystemException if a system exception occurred
	 */
	public List<EDFunctionDepartment> getEDFunctionDepartments(int start,
		int end) throws SystemException {
		return edFunctionDepartmentPersistence.findAll(start, end);
	}

	/**
	 * Gets the number of e d function departments.
	 *
	 * @return the number of e d function departments
	 * @throws SystemException if a system exception occurred
	 */
	public int getEDFunctionDepartmentsCount() throws SystemException {
		return edFunctionDepartmentPersistence.countAll();
	}

	/**
	 * Updates the e d function department in the database. Also notifies the appropriate model listeners.
	 *
	 * @param edFunctionDepartment the e d function department to update
	 * @return the e d function department that was updated
	 * @throws SystemException if a system exception occurred
	 */
	public EDFunctionDepartment updateEDFunctionDepartment(
		EDFunctionDepartment edFunctionDepartment) throws SystemException {
		edFunctionDepartment.setNew(false);

		return edFunctionDepartmentPersistence.update(edFunctionDepartment, true);
	}

	/**
	 * Updates the e d function department in the database. Also notifies the appropriate model listeners.
	 *
	 * @param edFunctionDepartment the e d function department to update
	 * @param merge whether to merge the e d function department with the current session. See {@link com.liferay.portal.service.persistence.BatchSession#update(com.liferay.portal.kernel.dao.orm.Session, com.liferay.portal.model.BaseModel, boolean)} for an explanation.
	 * @return the e d function department that was updated
	 * @throws SystemException if a system exception occurred
	 */
	public EDFunctionDepartment updateEDFunctionDepartment(
		EDFunctionDepartment edFunctionDepartment, boolean merge)
		throws SystemException {
		edFunctionDepartment.setNew(false);

		return edFunctionDepartmentPersistence.update(edFunctionDepartment,
			merge);
	}

	/**
	 * Gets the e d employee local service.
	 *
	 * @return the e d employee local service
	 */
	public EDEmployeeLocalService getEDEmployeeLocalService() {
		return edEmployeeLocalService;
	}

	/**
	 * Sets the e d employee local service.
	 *
	 * @param edEmployeeLocalService the e d employee local service
	 */
	public void setEDEmployeeLocalService(
		EDEmployeeLocalService edEmployeeLocalService) {
		this.edEmployeeLocalService = edEmployeeLocalService;
	}

	/**
	 * Gets the e d employee remote service.
	 *
	 * @return the e d employee remote service
	 */
	public EDEmployeeService getEDEmployeeService() {
		return edEmployeeService;
	}

	/**
	 * Sets the e d employee remote service.
	 *
	 * @param edEmployeeService the e d employee remote service
	 */
	public void setEDEmployeeService(EDEmployeeService edEmployeeService) {
		this.edEmployeeService = edEmployeeService;
	}

	/**
	 * Gets the e d employee persistence.
	 *
	 * @return the e d employee persistence
	 */
	public EDEmployeePersistence getEDEmployeePersistence() {
		return edEmployeePersistence;
	}

	/**
	 * Sets the e d employee persistence.
	 *
	 * @param edEmployeePersistence the e d employee persistence
	 */
	public void setEDEmployeePersistence(
		EDEmployeePersistence edEmployeePersistence) {
		this.edEmployeePersistence = edEmployeePersistence;
	}

	/**
	 * Gets the e d employee finder.
	 *
	 * @return the e d employee finder
	 */
	public EDEmployeeFinder getEDEmployeeFinder() {
		return edEmployeeFinder;
	}

	/**
	 * Sets the e d employee finder.
	 *
	 * @param edEmployeeFinder the e d employee finder
	 */
	public void setEDEmployeeFinder(EDEmployeeFinder edEmployeeFinder) {
		this.edEmployeeFinder = edEmployeeFinder;
	}

	/**
	 * Gets the e d department local service.
	 *
	 * @return the e d department local service
	 */
	public EDDepartmentLocalService getEDDepartmentLocalService() {
		return edDepartmentLocalService;
	}

	/**
	 * Sets the e d department local service.
	 *
	 * @param edDepartmentLocalService the e d department local service
	 */
	public void setEDDepartmentLocalService(
		EDDepartmentLocalService edDepartmentLocalService) {
		this.edDepartmentLocalService = edDepartmentLocalService;
	}

	/**
	 * Gets the e d department remote service.
	 *
	 * @return the e d department remote service
	 */
	public EDDepartmentService getEDDepartmentService() {
		return edDepartmentService;
	}

	/**
	 * Sets the e d department remote service.
	 *
	 * @param edDepartmentService the e d department remote service
	 */
	public void setEDDepartmentService(EDDepartmentService edDepartmentService) {
		this.edDepartmentService = edDepartmentService;
	}

	/**
	 * Gets the e d department persistence.
	 *
	 * @return the e d department persistence
	 */
	public EDDepartmentPersistence getEDDepartmentPersistence() {
		return edDepartmentPersistence;
	}

	/**
	 * Sets the e d department persistence.
	 *
	 * @param edDepartmentPersistence the e d department persistence
	 */
	public void setEDDepartmentPersistence(
		EDDepartmentPersistence edDepartmentPersistence) {
		this.edDepartmentPersistence = edDepartmentPersistence;
	}

	/**
	 * Gets the e d function local service.
	 *
	 * @return the e d function local service
	 */
	public EDFunctionLocalService getEDFunctionLocalService() {
		return edFunctionLocalService;
	}

	/**
	 * Sets the e d function local service.
	 *
	 * @param edFunctionLocalService the e d function local service
	 */
	public void setEDFunctionLocalService(
		EDFunctionLocalService edFunctionLocalService) {
		this.edFunctionLocalService = edFunctionLocalService;
	}

	/**
	 * Gets the e d function remote service.
	 *
	 * @return the e d function remote service
	 */
	public EDFunctionService getEDFunctionService() {
		return edFunctionService;
	}

	/**
	 * Sets the e d function remote service.
	 *
	 * @param edFunctionService the e d function remote service
	 */
	public void setEDFunctionService(EDFunctionService edFunctionService) {
		this.edFunctionService = edFunctionService;
	}

	/**
	 * Gets the e d function persistence.
	 *
	 * @return the e d function persistence
	 */
	public EDFunctionPersistence getEDFunctionPersistence() {
		return edFunctionPersistence;
	}

	/**
	 * Sets the e d function persistence.
	 *
	 * @param edFunctionPersistence the e d function persistence
	 */
	public void setEDFunctionPersistence(
		EDFunctionPersistence edFunctionPersistence) {
		this.edFunctionPersistence = edFunctionPersistence;
	}

	/**
	 * Gets the e d function department local service.
	 *
	 * @return the e d function department local service
	 */
	public EDFunctionDepartmentLocalService getEDFunctionDepartmentLocalService() {
		return edFunctionDepartmentLocalService;
	}

	/**
	 * Sets the e d function department local service.
	 *
	 * @param edFunctionDepartmentLocalService the e d function department local service
	 */
	public void setEDFunctionDepartmentLocalService(
		EDFunctionDepartmentLocalService edFunctionDepartmentLocalService) {
		this.edFunctionDepartmentLocalService = edFunctionDepartmentLocalService;
	}

	/**
	 * Gets the e d function department remote service.
	 *
	 * @return the e d function department remote service
	 */
	public EDFunctionDepartmentService getEDFunctionDepartmentService() {
		return edFunctionDepartmentService;
	}

	/**
	 * Sets the e d function department remote service.
	 *
	 * @param edFunctionDepartmentService the e d function department remote service
	 */
	public void setEDFunctionDepartmentService(
		EDFunctionDepartmentService edFunctionDepartmentService) {
		this.edFunctionDepartmentService = edFunctionDepartmentService;
	}

	/**
	 * Gets the e d function department persistence.
	 *
	 * @return the e d function department persistence
	 */
	public EDFunctionDepartmentPersistence getEDFunctionDepartmentPersistence() {
		return edFunctionDepartmentPersistence;
	}

	/**
	 * Sets the e d function department persistence.
	 *
	 * @param edFunctionDepartmentPersistence the e d function department persistence
	 */
	public void setEDFunctionDepartmentPersistence(
		EDFunctionDepartmentPersistence edFunctionDepartmentPersistence) {
		this.edFunctionDepartmentPersistence = edFunctionDepartmentPersistence;
	}

	/**
	 * Gets the e d function employee local service.
	 *
	 * @return the e d function employee local service
	 */
	public EDFunctionEmployeeLocalService getEDFunctionEmployeeLocalService() {
		return edFunctionEmployeeLocalService;
	}

	/**
	 * Sets the e d function employee local service.
	 *
	 * @param edFunctionEmployeeLocalService the e d function employee local service
	 */
	public void setEDFunctionEmployeeLocalService(
		EDFunctionEmployeeLocalService edFunctionEmployeeLocalService) {
		this.edFunctionEmployeeLocalService = edFunctionEmployeeLocalService;
	}

	/**
	 * Gets the e d function employee remote service.
	 *
	 * @return the e d function employee remote service
	 */
	public EDFunctionEmployeeService getEDFunctionEmployeeService() {
		return edFunctionEmployeeService;
	}

	/**
	 * Sets the e d function employee remote service.
	 *
	 * @param edFunctionEmployeeService the e d function employee remote service
	 */
	public void setEDFunctionEmployeeService(
		EDFunctionEmployeeService edFunctionEmployeeService) {
		this.edFunctionEmployeeService = edFunctionEmployeeService;
	}

	/**
	 * Gets the e d function employee persistence.
	 *
	 * @return the e d function employee persistence
	 */
	public EDFunctionEmployeePersistence getEDFunctionEmployeePersistence() {
		return edFunctionEmployeePersistence;
	}

	/**
	 * Sets the e d function employee persistence.
	 *
	 * @param edFunctionEmployeePersistence the e d function employee persistence
	 */
	public void setEDFunctionEmployeePersistence(
		EDFunctionEmployeePersistence edFunctionEmployeePersistence) {
		this.edFunctionEmployeePersistence = edFunctionEmployeePersistence;
	}

	/**
	 * Gets the counter local service.
	 *
	 * @return the counter local service
	 */
	public CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Gets the resource local service.
	 *
	 * @return the resource local service
	 */
	public ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Gets the resource remote service.
	 *
	 * @return the resource remote service
	 */
	public ResourceService getResourceService() {
		return resourceService;
	}

	/**
	 * Sets the resource remote service.
	 *
	 * @param resourceService the resource remote service
	 */
	public void setResourceService(ResourceService resourceService) {
		this.resourceService = resourceService;
	}

	/**
	 * Gets the resource persistence.
	 *
	 * @return the resource persistence
	 */
	public ResourcePersistence getResourcePersistence() {
		return resourcePersistence;
	}

	/**
	 * Sets the resource persistence.
	 *
	 * @param resourcePersistence the resource persistence
	 */
	public void setResourcePersistence(ResourcePersistence resourcePersistence) {
		this.resourcePersistence = resourcePersistence;
	}

	/**
	 * Gets the user local service.
	 *
	 * @return the user local service
	 */
	public UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Gets the user remote service.
	 *
	 * @return the user remote service
	 */
	public UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(UserService userService) {
		this.userService = userService;
	}

	/**
	 * Gets the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query to perform
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = edFunctionDepartmentPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = EDEmployeeLocalService.class)
	protected EDEmployeeLocalService edEmployeeLocalService;
	@BeanReference(type = EDEmployeeService.class)
	protected EDEmployeeService edEmployeeService;
	@BeanReference(type = EDEmployeePersistence.class)
	protected EDEmployeePersistence edEmployeePersistence;
	@BeanReference(type = EDEmployeeFinder.class)
	protected EDEmployeeFinder edEmployeeFinder;
	@BeanReference(type = EDDepartmentLocalService.class)
	protected EDDepartmentLocalService edDepartmentLocalService;
	@BeanReference(type = EDDepartmentService.class)
	protected EDDepartmentService edDepartmentService;
	@BeanReference(type = EDDepartmentPersistence.class)
	protected EDDepartmentPersistence edDepartmentPersistence;
	@BeanReference(type = EDFunctionLocalService.class)
	protected EDFunctionLocalService edFunctionLocalService;
	@BeanReference(type = EDFunctionService.class)
	protected EDFunctionService edFunctionService;
	@BeanReference(type = EDFunctionPersistence.class)
	protected EDFunctionPersistence edFunctionPersistence;
	@BeanReference(type = EDFunctionDepartmentLocalService.class)
	protected EDFunctionDepartmentLocalService edFunctionDepartmentLocalService;
	@BeanReference(type = EDFunctionDepartmentService.class)
	protected EDFunctionDepartmentService edFunctionDepartmentService;
	@BeanReference(type = EDFunctionDepartmentPersistence.class)
	protected EDFunctionDepartmentPersistence edFunctionDepartmentPersistence;
	@BeanReference(type = EDFunctionEmployeeLocalService.class)
	protected EDFunctionEmployeeLocalService edFunctionEmployeeLocalService;
	@BeanReference(type = EDFunctionEmployeeService.class)
	protected EDFunctionEmployeeService edFunctionEmployeeService;
	@BeanReference(type = EDFunctionEmployeePersistence.class)
	protected EDFunctionEmployeePersistence edFunctionEmployeePersistence;
	@BeanReference(type = CounterLocalService.class)
	protected CounterLocalService counterLocalService;
	@BeanReference(type = ResourceLocalService.class)
	protected ResourceLocalService resourceLocalService;
	@BeanReference(type = ResourceService.class)
	protected ResourceService resourceService;
	@BeanReference(type = ResourcePersistence.class)
	protected ResourcePersistence resourcePersistence;
	@BeanReference(type = UserLocalService.class)
	protected UserLocalService userLocalService;
	@BeanReference(type = UserService.class)
	protected UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
}