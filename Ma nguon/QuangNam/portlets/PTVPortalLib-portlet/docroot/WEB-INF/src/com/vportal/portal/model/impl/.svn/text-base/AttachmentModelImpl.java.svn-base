/**
 * Copyright (c) 2000-2011 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.vportal.portal.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.vportal.portal.model.Attachment;
import com.vportal.portal.model.AttachmentModel;
import com.vportal.portal.model.AttachmentSoap;

import java.io.Serializable;

import java.lang.reflect.Proxy;

import java.sql.Types;

import java.util.ArrayList;
import java.util.List;

/**
 * The base model implementation for the Attachment service. Represents a row in the &quot;Attachment&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.vportal.portal.model.AttachmentModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AttachmentImpl}.
 * </p>
 *
 * <p>
 * Never modify or reference this class directly. All methods that expect a attachment model instance should use the {@link com.vportal.portal.model.Attachment} interface instead.
 * </p>
 *
 * @author HOAN
 * @see AttachmentImpl
 * @see com.vportal.portal.model.Attachment
 * @see com.vportal.portal.model.AttachmentModel
 * @generated
 */
public class AttachmentModelImpl extends BaseModelImpl<Attachment>
	implements AttachmentModel {
	public static final String TABLE_NAME = "Attachment";
	public static final Object[][] TABLE_COLUMNS = {
			{ "attachmentId", new Integer(Types.BIGINT) },
			{ "groupId", new Integer(Types.BIGINT) },
			{ "companyId", new Integer(Types.BIGINT) },
			{ "entryId", new Integer(Types.BIGINT) },
			{ "entryClass", new Integer(Types.VARCHAR) },
			{ "fileEntryId", new Integer(Types.BIGINT) },
			{ "folderId", new Integer(Types.BIGINT) },
			{ "fileName", new Integer(Types.VARCHAR) },
			{ "imageId", new Integer(Types.BIGINT) },
			{ "extension", new Integer(Types.VARCHAR) }
		};
	public static final String TABLE_SQL_CREATE = "create table Attachment (attachmentId LONG not null primary key,groupId LONG,companyId LONG,entryId LONG,entryClass VARCHAR(75) null,fileEntryId LONG,folderId LONG,fileName VARCHAR(75) null,imageId LONG,extension VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table Attachment";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.vportal.portal.model.Attachment"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.vportal.portal.model.Attachment"),
			true);

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Attachment toModel(AttachmentSoap soapModel) {
		Attachment model = new AttachmentImpl();

		model.setAttachmentId(soapModel.getAttachmentId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setEntryId(soapModel.getEntryId());
		model.setEntryClass(soapModel.getEntryClass());
		model.setFileEntryId(soapModel.getFileEntryId());
		model.setFolderId(soapModel.getFolderId());
		model.setFileName(soapModel.getFileName());
		model.setImageId(soapModel.getImageId());
		model.setExtension(soapModel.getExtension());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Attachment> toModels(AttachmentSoap[] soapModels) {
		List<Attachment> models = new ArrayList<Attachment>(soapModels.length);

		for (AttachmentSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.vportal.portal.model.Attachment"));

	public AttachmentModelImpl() {
	}

	public long getPrimaryKey() {
		return _attachmentId;
	}

	public void setPrimaryKey(long pk) {
		setAttachmentId(pk);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_attachmentId);
	}

	public long getAttachmentId() {
		return _attachmentId;
	}

	public void setAttachmentId(long attachmentId) {
		_attachmentId = attachmentId;
	}

	public long getGroupId() {
		return _groupId;
	}

	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	public long getCompanyId() {
		return _companyId;
	}

	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	public long getEntryId() {
		return _entryId;
	}

	public void setEntryId(long entryId) {
		_entryId = entryId;
	}

	public String getEntryClass() {
		if (_entryClass == null) {
			return StringPool.BLANK;
		}
		else {
			return _entryClass;
		}
	}

	public void setEntryClass(String entryClass) {
		if (_originalEntryClass == null) {
			_originalEntryClass = _entryClass;
		}

		_entryClass = entryClass;
	}

	public String getOriginalEntryClass() {
		return GetterUtil.getString(_originalEntryClass);
	}

	public long getFileEntryId() {
		return _fileEntryId;
	}

	public void setFileEntryId(long fileEntryId) {
		_fileEntryId = fileEntryId;
	}

	public long getFolderId() {
		return _folderId;
	}

	public void setFolderId(long folderId) {
		if (!_setOriginalFolderId) {
			_setOriginalFolderId = true;

			_originalFolderId = _folderId;
		}

		_folderId = folderId;
	}

	public long getOriginalFolderId() {
		return _originalFolderId;
	}

	public String getFileName() {
		if (_fileName == null) {
			return StringPool.BLANK;
		}
		else {
			return _fileName;
		}
	}

	public void setFileName(String fileName) {
		if (_originalFileName == null) {
			_originalFileName = _fileName;
		}

		_fileName = fileName;
	}

	public String getOriginalFileName() {
		return GetterUtil.getString(_originalFileName);
	}

	public long getImageId() {
		return _imageId;
	}

	public void setImageId(long imageId) {
		_imageId = imageId;
	}

	public String getExtension() {
		if (_extension == null) {
			return StringPool.BLANK;
		}
		else {
			return _extension;
		}
	}

	public void setExtension(String extension) {
		_extension = extension;
	}

	public Attachment toEscapedModel() {
		if (isEscapedModel()) {
			return (Attachment)this;
		}
		else {
			return (Attachment)Proxy.newProxyInstance(Attachment.class.getClassLoader(),
				new Class[] { Attachment.class },
				new AutoEscapeBeanHandler(this));
		}
	}

	public ExpandoBridge getExpandoBridge() {
		if (_expandoBridge == null) {
			_expandoBridge = ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
					Attachment.class.getName(), getPrimaryKey());
		}

		return _expandoBridge;
	}

	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		getExpandoBridge().setAttributes(serviceContext);
	}

	public Object clone() {
		AttachmentImpl attachmentImpl = new AttachmentImpl();

		attachmentImpl.setAttachmentId(getAttachmentId());

		attachmentImpl.setGroupId(getGroupId());

		attachmentImpl.setCompanyId(getCompanyId());

		attachmentImpl.setEntryId(getEntryId());

		attachmentImpl.setEntryClass(getEntryClass());

		AttachmentModelImpl attachmentModelImpl = attachmentImpl;

		attachmentModelImpl._originalEntryClass = attachmentModelImpl._entryClass;

		attachmentImpl.setFileEntryId(getFileEntryId());

		attachmentImpl.setFolderId(getFolderId());

		attachmentModelImpl._originalFolderId = attachmentModelImpl._folderId;

		attachmentModelImpl._setOriginalFolderId = false;
		attachmentImpl.setFileName(getFileName());

		attachmentModelImpl._originalFileName = attachmentModelImpl._fileName;

		attachmentImpl.setImageId(getImageId());

		attachmentImpl.setExtension(getExtension());

		return attachmentImpl;
	}

	public int compareTo(Attachment attachment) {
		long pk = attachment.getPrimaryKey();

		if (getPrimaryKey() < pk) {
			return -1;
		}
		else if (getPrimaryKey() > pk) {
			return 1;
		}
		else {
			return 0;
		}
	}

	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		Attachment attachment = null;

		try {
			attachment = (Attachment)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long pk = attachment.getPrimaryKey();

		if (getPrimaryKey() == pk) {
			return true;
		}
		else {
			return false;
		}
	}

	public int hashCode() {
		return (int)getPrimaryKey();
	}

	public String toString() {
		StringBundler sb = new StringBundler(21);

		sb.append("{attachmentId=");
		sb.append(getAttachmentId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", entryId=");
		sb.append(getEntryId());
		sb.append(", entryClass=");
		sb.append(getEntryClass());
		sb.append(", fileEntryId=");
		sb.append(getFileEntryId());
		sb.append(", folderId=");
		sb.append(getFolderId());
		sb.append(", fileName=");
		sb.append(getFileName());
		sb.append(", imageId=");
		sb.append(getImageId());
		sb.append(", extension=");
		sb.append(getExtension());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(34);

		sb.append("<model><model-name>");
		sb.append("com.vportal.portal.model.Attachment");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>attachmentId</column-name><column-value><![CDATA[");
		sb.append(getAttachmentId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>entryId</column-name><column-value><![CDATA[");
		sb.append(getEntryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>entryClass</column-name><column-value><![CDATA[");
		sb.append(getEntryClass());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fileEntryId</column-name><column-value><![CDATA[");
		sb.append(getFileEntryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>folderId</column-name><column-value><![CDATA[");
		sb.append(getFolderId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fileName</column-name><column-value><![CDATA[");
		sb.append(getFileName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>imageId</column-name><column-value><![CDATA[");
		sb.append(getImageId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>extension</column-name><column-value><![CDATA[");
		sb.append(getExtension());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private long _attachmentId;
	private long _groupId;
	private long _companyId;
	private long _entryId;
	private String _entryClass;
	private String _originalEntryClass;
	private long _fileEntryId;
	private long _folderId;
	private long _originalFolderId;
	private boolean _setOriginalFolderId;
	private String _fileName;
	private String _originalFileName;
	private long _imageId;
	private String _extension;
	private transient ExpandoBridge _expandoBridge;
}