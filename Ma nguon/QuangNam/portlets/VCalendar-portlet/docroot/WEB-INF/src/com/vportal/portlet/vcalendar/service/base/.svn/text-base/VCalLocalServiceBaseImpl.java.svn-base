/**
 * Copyright (c) 2000-2011 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.vportal.portlet.vcalendar.service.base;

import com.liferay.counter.service.CounterLocalService;

import com.liferay.mail.service.MailService;

import com.liferay.portal.kernel.annotation.BeanReference;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.service.CompanyLocalService;
import com.liferay.portal.service.CompanyService;
import com.liferay.portal.service.PortletPreferencesLocalService;
import com.liferay.portal.service.PortletPreferencesService;
import com.liferay.portal.service.ResourceLocalService;
import com.liferay.portal.service.ResourceService;
import com.liferay.portal.service.UserLocalService;
import com.liferay.portal.service.UserService;
import com.liferay.portal.service.persistence.CompanyPersistence;
import com.liferay.portal.service.persistence.PortletPreferencesPersistence;
import com.liferay.portal.service.persistence.ResourcePersistence;
import com.liferay.portal.service.persistence.UserPersistence;

import com.vportal.portlet.vcalendar.model.VCal;
import com.vportal.portlet.vcalendar.service.VCalLocalService;
import com.vportal.portlet.vcalendar.service.VCalService;
import com.vportal.portlet.vcalendar.service.VFileService;
import com.vportal.portlet.vcalendar.service.persistence.VCalFinder;
import com.vportal.portlet.vcalendar.service.persistence.VCalPersistence;
import com.vportal.portlet.vcalendar.service.persistence.VFilePersistence;

import java.util.List;

import javax.sql.DataSource;

/**
 * The base implementation of the v cal local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.vportal.portlet.vcalendar.service.impl.VCalLocalServiceImpl}.
 * </p>
 *
 * <p>
 * Never modify or reference this class directly. Always use {@link com.vportal.portlet.vcalendar.service.VCalLocalServiceUtil} to access the v cal local service.
 * </p>
 *
 * @author Admin
 * @see com.vportal.portlet.vcalendar.service.impl.VCalLocalServiceImpl
 * @see com.vportal.portlet.vcalendar.service.VCalLocalServiceUtil
 * @generated
 */
public abstract class VCalLocalServiceBaseImpl implements VCalLocalService {
	/**
	 * Adds the v cal to the database. Also notifies the appropriate model listeners.
	 *
	 * @param vCal the v cal to add
	 * @return the v cal that was added
	 * @throws SystemException if a system exception occurred
	 */
	public VCal addVCal(VCal vCal) throws SystemException {
		vCal.setNew(true);

		return vCalPersistence.update(vCal, false);
	}

	/**
	 * Creates a new v cal with the primary key. Does not add the v cal to the database.
	 *
	 * @param calId the primary key for the new v cal
	 * @return the new v cal
	 */
	public VCal createVCal(long calId) {
		return vCalPersistence.create(calId);
	}

	/**
	 * Deletes the v cal with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param calId the primary key of the v cal to delete
	 * @throws PortalException if a v cal with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	public void deleteVCal(long calId) throws PortalException, SystemException {
		vCalPersistence.remove(calId);
	}

	/**
	 * Deletes the v cal from the database. Also notifies the appropriate model listeners.
	 *
	 * @param vCal the v cal to delete
	 * @throws SystemException if a system exception occurred
	 */
	public void deleteVCal(VCal vCal) throws SystemException {
		vCalPersistence.remove(vCal);
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query to search with
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return vCalPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query to search with
	 * @param start the lower bound of the range of model instances to return
	 * @param end the upper bound of the range of model instances to return (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return vCalPersistence.findWithDynamicQuery(dynamicQuery, start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query to search with
	 * @param start the lower bound of the range of model instances to return
	 * @param end the upper bound of the range of model instances to return (not inclusive)
	 * @param orderByComparator the comparator to order the results by
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return vCalPersistence.findWithDynamicQuery(dynamicQuery, start, end,
			orderByComparator);
	}

	/**
	 * Counts the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query to search with
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
		throws SystemException {
		return vCalPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Gets the v cal with the primary key.
	 *
	 * @param calId the primary key of the v cal to get
	 * @return the v cal
	 * @throws PortalException if a v cal with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	public VCal getVCal(long calId) throws PortalException, SystemException {
		return vCalPersistence.findByPrimaryKey(calId);
	}

	/**
	 * Gets a range of all the v cals.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set.
	 * </p>
	 *
	 * @param start the lower bound of the range of v cals to return
	 * @param end the upper bound of the range of v cals to return (not inclusive)
	 * @return the range of v cals
	 * @throws SystemException if a system exception occurred
	 */
	public List<VCal> getVCals(int start, int end) throws SystemException {
		return vCalPersistence.findAll(start, end);
	}

	/**
	 * Gets the number of v cals.
	 *
	 * @return the number of v cals
	 * @throws SystemException if a system exception occurred
	 */
	public int getVCalsCount() throws SystemException {
		return vCalPersistence.countAll();
	}

	/**
	 * Updates the v cal in the database. Also notifies the appropriate model listeners.
	 *
	 * @param vCal the v cal to update
	 * @return the v cal that was updated
	 * @throws SystemException if a system exception occurred
	 */
	public VCal updateVCal(VCal vCal) throws SystemException {
		vCal.setNew(false);

		return vCalPersistence.update(vCal, true);
	}

	/**
	 * Updates the v cal in the database. Also notifies the appropriate model listeners.
	 *
	 * @param vCal the v cal to update
	 * @param merge whether to merge the v cal with the current session. See {@link com.liferay.portal.service.persistence.BatchSession#update(com.liferay.portal.kernel.dao.orm.Session, com.liferay.portal.model.BaseModel, boolean)} for an explanation.
	 * @return the v cal that was updated
	 * @throws SystemException if a system exception occurred
	 */
	public VCal updateVCal(VCal vCal, boolean merge) throws SystemException {
		vCal.setNew(false);

		return vCalPersistence.update(vCal, merge);
	}

	/**
	 * Gets the v cal local service.
	 *
	 * @return the v cal local service
	 */
	public VCalLocalService getVCalLocalService() {
		return vCalLocalService;
	}

	/**
	 * Sets the v cal local service.
	 *
	 * @param vCalLocalService the v cal local service
	 */
	public void setVCalLocalService(VCalLocalService vCalLocalService) {
		this.vCalLocalService = vCalLocalService;
	}

	/**
	 * Gets the v cal remote service.
	 *
	 * @return the v cal remote service
	 */
	public VCalService getVCalService() {
		return vCalService;
	}

	/**
	 * Sets the v cal remote service.
	 *
	 * @param vCalService the v cal remote service
	 */
	public void setVCalService(VCalService vCalService) {
		this.vCalService = vCalService;
	}

	/**
	 * Gets the v cal persistence.
	 *
	 * @return the v cal persistence
	 */
	public VCalPersistence getVCalPersistence() {
		return vCalPersistence;
	}

	/**
	 * Sets the v cal persistence.
	 *
	 * @param vCalPersistence the v cal persistence
	 */
	public void setVCalPersistence(VCalPersistence vCalPersistence) {
		this.vCalPersistence = vCalPersistence;
	}

	/**
	 * Gets the v cal finder.
	 *
	 * @return the v cal finder
	 */
	public VCalFinder getVCalFinder() {
		return vCalFinder;
	}

	/**
	 * Sets the v cal finder.
	 *
	 * @param vCalFinder the v cal finder
	 */
	public void setVCalFinder(VCalFinder vCalFinder) {
		this.vCalFinder = vCalFinder;
	}

	/**
	 * Gets the v file remote service.
	 *
	 * @return the v file remote service
	 */
	public VFileService getVFileService() {
		return vFileService;
	}

	/**
	 * Sets the v file remote service.
	 *
	 * @param vFileService the v file remote service
	 */
	public void setVFileService(VFileService vFileService) {
		this.vFileService = vFileService;
	}

	/**
	 * Gets the v file persistence.
	 *
	 * @return the v file persistence
	 */
	public VFilePersistence getVFilePersistence() {
		return vFilePersistence;
	}

	/**
	 * Sets the v file persistence.
	 *
	 * @param vFilePersistence the v file persistence
	 */
	public void setVFilePersistence(VFilePersistence vFilePersistence) {
		this.vFilePersistence = vFilePersistence;
	}

	/**
	 * Gets the counter local service.
	 *
	 * @return the counter local service
	 */
	public CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Gets the mail remote service.
	 *
	 * @return the mail remote service
	 */
	public MailService getMailService() {
		return mailService;
	}

	/**
	 * Sets the mail remote service.
	 *
	 * @param mailService the mail remote service
	 */
	public void setMailService(MailService mailService) {
		this.mailService = mailService;
	}

	/**
	 * Gets the company local service.
	 *
	 * @return the company local service
	 */
	public CompanyLocalService getCompanyLocalService() {
		return companyLocalService;
	}

	/**
	 * Sets the company local service.
	 *
	 * @param companyLocalService the company local service
	 */
	public void setCompanyLocalService(CompanyLocalService companyLocalService) {
		this.companyLocalService = companyLocalService;
	}

	/**
	 * Gets the company remote service.
	 *
	 * @return the company remote service
	 */
	public CompanyService getCompanyService() {
		return companyService;
	}

	/**
	 * Sets the company remote service.
	 *
	 * @param companyService the company remote service
	 */
	public void setCompanyService(CompanyService companyService) {
		this.companyService = companyService;
	}

	/**
	 * Gets the company persistence.
	 *
	 * @return the company persistence
	 */
	public CompanyPersistence getCompanyPersistence() {
		return companyPersistence;
	}

	/**
	 * Sets the company persistence.
	 *
	 * @param companyPersistence the company persistence
	 */
	public void setCompanyPersistence(CompanyPersistence companyPersistence) {
		this.companyPersistence = companyPersistence;
	}

	/**
	 * Gets the portlet preferences local service.
	 *
	 * @return the portlet preferences local service
	 */
	public PortletPreferencesLocalService getPortletPreferencesLocalService() {
		return portletPreferencesLocalService;
	}

	/**
	 * Sets the portlet preferences local service.
	 *
	 * @param portletPreferencesLocalService the portlet preferences local service
	 */
	public void setPortletPreferencesLocalService(
		PortletPreferencesLocalService portletPreferencesLocalService) {
		this.portletPreferencesLocalService = portletPreferencesLocalService;
	}

	/**
	 * Gets the portlet preferences remote service.
	 *
	 * @return the portlet preferences remote service
	 */
	public PortletPreferencesService getPortletPreferencesService() {
		return portletPreferencesService;
	}

	/**
	 * Sets the portlet preferences remote service.
	 *
	 * @param portletPreferencesService the portlet preferences remote service
	 */
	public void setPortletPreferencesService(
		PortletPreferencesService portletPreferencesService) {
		this.portletPreferencesService = portletPreferencesService;
	}

	/**
	 * Gets the portlet preferences persistence.
	 *
	 * @return the portlet preferences persistence
	 */
	public PortletPreferencesPersistence getPortletPreferencesPersistence() {
		return portletPreferencesPersistence;
	}

	/**
	 * Sets the portlet preferences persistence.
	 *
	 * @param portletPreferencesPersistence the portlet preferences persistence
	 */
	public void setPortletPreferencesPersistence(
		PortletPreferencesPersistence portletPreferencesPersistence) {
		this.portletPreferencesPersistence = portletPreferencesPersistence;
	}

	/**
	 * Gets the resource local service.
	 *
	 * @return the resource local service
	 */
	public ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Gets the resource remote service.
	 *
	 * @return the resource remote service
	 */
	public ResourceService getResourceService() {
		return resourceService;
	}

	/**
	 * Sets the resource remote service.
	 *
	 * @param resourceService the resource remote service
	 */
	public void setResourceService(ResourceService resourceService) {
		this.resourceService = resourceService;
	}

	/**
	 * Gets the resource persistence.
	 *
	 * @return the resource persistence
	 */
	public ResourcePersistence getResourcePersistence() {
		return resourcePersistence;
	}

	/**
	 * Sets the resource persistence.
	 *
	 * @param resourcePersistence the resource persistence
	 */
	public void setResourcePersistence(ResourcePersistence resourcePersistence) {
		this.resourcePersistence = resourcePersistence;
	}

	/**
	 * Gets the user local service.
	 *
	 * @return the user local service
	 */
	public UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Gets the user remote service.
	 *
	 * @return the user remote service
	 */
	public UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(UserService userService) {
		this.userService = userService;
	}

	/**
	 * Gets the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query to perform
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = vCalPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = VCalLocalService.class)
	protected VCalLocalService vCalLocalService;
	@BeanReference(type = VCalService.class)
	protected VCalService vCalService;
	@BeanReference(type = VCalPersistence.class)
	protected VCalPersistence vCalPersistence;
	@BeanReference(type = VCalFinder.class)
	protected VCalFinder vCalFinder;
	@BeanReference(type = VFileService.class)
	protected VFileService vFileService;
	@BeanReference(type = VFilePersistence.class)
	protected VFilePersistence vFilePersistence;
	@BeanReference(type = CounterLocalService.class)
	protected CounterLocalService counterLocalService;
	@BeanReference(type = MailService.class)
	protected MailService mailService;
	@BeanReference(type = CompanyLocalService.class)
	protected CompanyLocalService companyLocalService;
	@BeanReference(type = CompanyService.class)
	protected CompanyService companyService;
	@BeanReference(type = CompanyPersistence.class)
	protected CompanyPersistence companyPersistence;
	@BeanReference(type = PortletPreferencesLocalService.class)
	protected PortletPreferencesLocalService portletPreferencesLocalService;
	@BeanReference(type = PortletPreferencesService.class)
	protected PortletPreferencesService portletPreferencesService;
	@BeanReference(type = PortletPreferencesPersistence.class)
	protected PortletPreferencesPersistence portletPreferencesPersistence;
	@BeanReference(type = ResourceLocalService.class)
	protected ResourceLocalService resourceLocalService;
	@BeanReference(type = ResourceService.class)
	protected ResourceService resourceService;
	@BeanReference(type = ResourcePersistence.class)
	protected ResourcePersistence resourcePersistence;
	@BeanReference(type = UserLocalService.class)
	protected UserLocalService userLocalService;
	@BeanReference(type = UserService.class)
	protected UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
}