/**
 * Copyright (c) 2000-2011 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.portlet.vdoc.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.util.PortalUtil;

import com.portlet.vdoc.model.vdocDocument;
import com.portlet.vdoc.model.vdocDocumentModel;
import com.portlet.vdoc.model.vdocDocumentSoap;

import java.io.Serializable;

import java.lang.reflect.Proxy;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 * The base model implementation for the vdocDocument service. Represents a row in the &quot;vdocDocument&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.portlet.vdoc.model.vdocDocumentModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link vdocDocumentImpl}.
 * </p>
 *
 * <p>
 * Never modify or reference this class directly. All methods that expect a vdoc document model instance should use the {@link com.portlet.vdoc.model.vdocDocument} interface instead.
 * </p>
 *
 * @author vinhnt
 * @see vdocDocumentImpl
 * @see com.portlet.vdoc.model.vdocDocument
 * @see com.portlet.vdoc.model.vdocDocumentModel
 * @generated
 */
public class vdocDocumentModelImpl extends BaseModelImpl<vdocDocument>
	implements vdocDocumentModel {
	public static final String TABLE_NAME = "vdocDocument";
	public static final Object[][] TABLE_COLUMNS = {
			{ "docId", new Integer(Types.VARCHAR) },
			{ "groupId", new Integer(Types.BIGINT) },
			{ "language", new Integer(Types.VARCHAR) },
			{ "companyId", new Integer(Types.BIGINT) },
			{ "userId", new Integer(Types.BIGINT) },
			{ "createdByUser", new Integer(Types.BIGINT) },
			{ "createdDate", new Integer(Types.TIMESTAMP) },
			{ "modifiedByUser", new Integer(Types.BIGINT) },
			{ "modifiedDate", new Integer(Types.TIMESTAMP) },
			{ "approvedByUser", new Integer(Types.BIGINT) },
			{ "approvedDate", new Integer(Types.TIMESTAMP) },
			{ "publishedByUser", new Integer(Types.BIGINT) },
			{ "publishedDate", new Integer(Types.TIMESTAMP) },
			{ "promulDate", new Integer(Types.TIMESTAMP) },
			{ "effectivedDate", new Integer(Types.TIMESTAMP) },
			{ "expiredDate", new Integer(Types.TIMESTAMP) },
			{ "replaceDoc", new Integer(Types.VARCHAR) },
			{ "title", new Integer(Types.VARCHAR) },
			{ "content", new Integer(Types.VARCHAR) },
			{ "process", new Integer(Types.VARCHAR) },
			{ "base", new Integer(Types.VARCHAR) },
			{ "time", new Integer(Types.VARCHAR) },
			{ "cost", new Integer(Types.VARCHAR) },
			{ "require", new Integer(Types.VARCHAR) },
			{ "result", new Integer(Types.VARCHAR) },
			{ "objects", new Integer(Types.VARCHAR) },
			{ "style", new Integer(Types.VARCHAR) },
			{ "position", new Integer(Types.INTEGER) },
			{ "note", new Integer(Types.VARCHAR) },
			{ "userHit", new Integer(Types.INTEGER) },
			{ "statusDoc", new Integer(Types.INTEGER) },
			{ "typeDoc", new Integer(Types.INTEGER) },
			{ "hasAttachment", new Integer(Types.BOOLEAN) },
			{ "fieldId", new Integer(Types.VARCHAR) },
			{ "orgRels", new Integer(Types.VARCHAR) },
			{ "fieldRels", new Integer(Types.VARCHAR) }
		};
	public static final String TABLE_SQL_CREATE = "create table vdocDocument (docId VARCHAR(75) not null primary key,groupId LONG,language VARCHAR(75) null,companyId LONG,userId LONG,createdByUser LONG,createdDate DATE null,modifiedByUser LONG,modifiedDate DATE null,approvedByUser LONG,approvedDate DATE null,publishedByUser LONG,publishedDate DATE null,promulDate DATE null,effectivedDate DATE null,expiredDate DATE null,replaceDoc VARCHAR(75) null,title VARCHAR(75) null,content VARCHAR(75) null,process VARCHAR(75) null,base VARCHAR(75) null,time VARCHAR(75) null,cost VARCHAR(75) null,require VARCHAR(75) null,result VARCHAR(75) null,objects VARCHAR(75) null,style VARCHAR(75) null,position INTEGER,note VARCHAR(75) null,userHit INTEGER,statusDoc INTEGER,typeDoc INTEGER,hasAttachment BOOLEAN,fieldId VARCHAR(75) null,orgRels VARCHAR(75) null,fieldRels VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table vdocDocument";
	public static final String ORDER_BY_JPQL = " ORDER BY vdocDocument.position DESC";
	public static final String ORDER_BY_SQL = " ORDER BY vdocDocument.position DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.portlet.vdoc.model.vdocDocument"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.portlet.vdoc.model.vdocDocument"),
			true);

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static vdocDocument toModel(vdocDocumentSoap soapModel) {
		vdocDocument model = new vdocDocumentImpl();

		model.setDocId(soapModel.getDocId());
		model.setGroupId(soapModel.getGroupId());
		model.setLanguage(soapModel.getLanguage());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setCreatedByUser(soapModel.getCreatedByUser());
		model.setCreatedDate(soapModel.getCreatedDate());
		model.setModifiedByUser(soapModel.getModifiedByUser());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setApprovedByUser(soapModel.getApprovedByUser());
		model.setApprovedDate(soapModel.getApprovedDate());
		model.setPublishedByUser(soapModel.getPublishedByUser());
		model.setPublishedDate(soapModel.getPublishedDate());
		model.setPromulDate(soapModel.getPromulDate());
		model.setEffectivedDate(soapModel.getEffectivedDate());
		model.setExpiredDate(soapModel.getExpiredDate());
		model.setReplaceDoc(soapModel.getReplaceDoc());
		model.setTitle(soapModel.getTitle());
		model.setContent(soapModel.getContent());
		model.setProcess(soapModel.getProcess());
		model.setBase(soapModel.getBase());
		model.setTime(soapModel.getTime());
		model.setCost(soapModel.getCost());
		model.setRequire(soapModel.getRequire());
		model.setResult(soapModel.getResult());
		model.setObjects(soapModel.getObjects());
		model.setStyle(soapModel.getStyle());
		model.setPosition(soapModel.getPosition());
		model.setNote(soapModel.getNote());
		model.setUserHit(soapModel.getUserHit());
		model.setStatusDoc(soapModel.getStatusDoc());
		model.setTypeDoc(soapModel.getTypeDoc());
		model.setHasAttachment(soapModel.getHasAttachment());
		model.setFieldId(soapModel.getFieldId());
		model.setOrgRels(soapModel.getOrgRels());
		model.setFieldRels(soapModel.getFieldRels());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<vdocDocument> toModels(vdocDocumentSoap[] soapModels) {
		List<vdocDocument> models = new ArrayList<vdocDocument>(soapModels.length);

		for (vdocDocumentSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.portlet.vdoc.model.vdocDocument"));

	public vdocDocumentModelImpl() {
	}

	public String getPrimaryKey() {
		return _docId;
	}

	public void setPrimaryKey(String pk) {
		setDocId(pk);
	}

	public Serializable getPrimaryKeyObj() {
		return _docId;
	}

	public String getDocId() {
		if (_docId == null) {
			return StringPool.BLANK;
		}
		else {
			return _docId;
		}
	}

	public void setDocId(String docId) {
		if (_originalDocId == null) {
			_originalDocId = _docId;
		}

		_docId = docId;
	}

	public String getOriginalDocId() {
		return GetterUtil.getString(_originalDocId);
	}

	public long getGroupId() {
		return _groupId;
	}

	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	public String getLanguage() {
		if (_language == null) {
			return StringPool.BLANK;
		}
		else {
			return _language;
		}
	}

	public void setLanguage(String language) {
		_language = language;
	}

	public long getCompanyId() {
		return _companyId;
	}

	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	public long getUserId() {
		return _userId;
	}

	public void setUserId(long userId) {
		_userId = userId;
	}

	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public long getCreatedByUser() {
		return _createdByUser;
	}

	public void setCreatedByUser(long createdByUser) {
		_createdByUser = createdByUser;
	}

	public Date getCreatedDate() {
		return _createdDate;
	}

	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	public long getModifiedByUser() {
		return _modifiedByUser;
	}

	public void setModifiedByUser(long modifiedByUser) {
		_modifiedByUser = modifiedByUser;
	}

	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	public long getApprovedByUser() {
		return _approvedByUser;
	}

	public void setApprovedByUser(long approvedByUser) {
		_approvedByUser = approvedByUser;
	}

	public Date getApprovedDate() {
		return _approvedDate;
	}

	public void setApprovedDate(Date approvedDate) {
		_approvedDate = approvedDate;
	}

	public long getPublishedByUser() {
		return _publishedByUser;
	}

	public void setPublishedByUser(long publishedByUser) {
		_publishedByUser = publishedByUser;
	}

	public Date getPublishedDate() {
		return _publishedDate;
	}

	public void setPublishedDate(Date publishedDate) {
		_publishedDate = publishedDate;
	}

	public Date getPromulDate() {
		return _promulDate;
	}

	public void setPromulDate(Date promulDate) {
		_promulDate = promulDate;
	}

	public Date getEffectivedDate() {
		return _effectivedDate;
	}

	public void setEffectivedDate(Date effectivedDate) {
		_effectivedDate = effectivedDate;
	}

	public Date getExpiredDate() {
		return _expiredDate;
	}

	public void setExpiredDate(Date expiredDate) {
		_expiredDate = expiredDate;
	}

	public String getReplaceDoc() {
		if (_replaceDoc == null) {
			return StringPool.BLANK;
		}
		else {
			return _replaceDoc;
		}
	}

	public void setReplaceDoc(String replaceDoc) {
		_replaceDoc = replaceDoc;
	}

	public String getTitle() {
		if (_title == null) {
			return StringPool.BLANK;
		}
		else {
			return _title;
		}
	}

	public void setTitle(String title) {
		_title = title;
	}

	public String getContent() {
		if (_content == null) {
			return StringPool.BLANK;
		}
		else {
			return _content;
		}
	}

	public void setContent(String content) {
		_content = content;
	}

	public String getProcess() {
		if (_process == null) {
			return StringPool.BLANK;
		}
		else {
			return _process;
		}
	}

	public void setProcess(String process) {
		_process = process;
	}

	public String getBase() {
		if (_base == null) {
			return StringPool.BLANK;
		}
		else {
			return _base;
		}
	}

	public void setBase(String base) {
		_base = base;
	}

	public String getTime() {
		if (_time == null) {
			return StringPool.BLANK;
		}
		else {
			return _time;
		}
	}

	public void setTime(String time) {
		_time = time;
	}

	public String getCost() {
		if (_cost == null) {
			return StringPool.BLANK;
		}
		else {
			return _cost;
		}
	}

	public void setCost(String cost) {
		_cost = cost;
	}

	public String getRequire() {
		if (_require == null) {
			return StringPool.BLANK;
		}
		else {
			return _require;
		}
	}

	public void setRequire(String require) {
		_require = require;
	}

	public String getResult() {
		if (_result == null) {
			return StringPool.BLANK;
		}
		else {
			return _result;
		}
	}

	public void setResult(String result) {
		_result = result;
	}

	public String getObjects() {
		if (_objects == null) {
			return StringPool.BLANK;
		}
		else {
			return _objects;
		}
	}

	public void setObjects(String objects) {
		_objects = objects;
	}

	public String getStyle() {
		if (_style == null) {
			return StringPool.BLANK;
		}
		else {
			return _style;
		}
	}

	public void setStyle(String style) {
		_style = style;
	}

	public int getPosition() {
		return _position;
	}

	public void setPosition(int position) {
		_position = position;
	}

	public String getNote() {
		if (_note == null) {
			return StringPool.BLANK;
		}
		else {
			return _note;
		}
	}

	public void setNote(String note) {
		_note = note;
	}

	public int getUserHit() {
		return _userHit;
	}

	public void setUserHit(int userHit) {
		_userHit = userHit;
	}

	public int getStatusDoc() {
		return _statusDoc;
	}

	public void setStatusDoc(int statusDoc) {
		_statusDoc = statusDoc;
	}

	public int getTypeDoc() {
		return _typeDoc;
	}

	public void setTypeDoc(int typeDoc) {
		_typeDoc = typeDoc;
	}

	public boolean getHasAttachment() {
		return _hasAttachment;
	}

	public boolean isHasAttachment() {
		return _hasAttachment;
	}

	public void setHasAttachment(boolean hasAttachment) {
		_hasAttachment = hasAttachment;
	}

	public String getFieldId() {
		if (_fieldId == null) {
			return StringPool.BLANK;
		}
		else {
			return _fieldId;
		}
	}

	public void setFieldId(String fieldId) {
		if (_originalFieldId == null) {
			_originalFieldId = _fieldId;
		}

		_fieldId = fieldId;
	}

	public String getOriginalFieldId() {
		return GetterUtil.getString(_originalFieldId);
	}

	public String getOrgRels() {
		if (_orgRels == null) {
			return StringPool.BLANK;
		}
		else {
			return _orgRels;
		}
	}

	public void setOrgRels(String orgRels) {
		_orgRels = orgRels;
	}

	public String getFieldRels() {
		if (_fieldRels == null) {
			return StringPool.BLANK;
		}
		else {
			return _fieldRels;
		}
	}

	public void setFieldRels(String fieldRels) {
		_fieldRels = fieldRels;
	}

	public vdocDocument toEscapedModel() {
		if (isEscapedModel()) {
			return (vdocDocument)this;
		}
		else {
			return (vdocDocument)Proxy.newProxyInstance(vdocDocument.class.getClassLoader(),
				new Class[] { vdocDocument.class },
				new AutoEscapeBeanHandler(this));
		}
	}

	public Object clone() {
		vdocDocumentImpl vdocDocumentImpl = new vdocDocumentImpl();

		vdocDocumentImpl.setDocId(getDocId());

		vdocDocumentModelImpl vdocDocumentModelImpl = vdocDocumentImpl;

		vdocDocumentModelImpl._originalDocId = vdocDocumentModelImpl._docId;

		vdocDocumentImpl.setGroupId(getGroupId());

		vdocDocumentImpl.setLanguage(getLanguage());

		vdocDocumentImpl.setCompanyId(getCompanyId());

		vdocDocumentImpl.setUserId(getUserId());

		vdocDocumentImpl.setCreatedByUser(getCreatedByUser());

		vdocDocumentImpl.setCreatedDate(getCreatedDate());

		vdocDocumentImpl.setModifiedByUser(getModifiedByUser());

		vdocDocumentImpl.setModifiedDate(getModifiedDate());

		vdocDocumentImpl.setApprovedByUser(getApprovedByUser());

		vdocDocumentImpl.setApprovedDate(getApprovedDate());

		vdocDocumentImpl.setPublishedByUser(getPublishedByUser());

		vdocDocumentImpl.setPublishedDate(getPublishedDate());

		vdocDocumentImpl.setPromulDate(getPromulDate());

		vdocDocumentImpl.setEffectivedDate(getEffectivedDate());

		vdocDocumentImpl.setExpiredDate(getExpiredDate());

		vdocDocumentImpl.setReplaceDoc(getReplaceDoc());

		vdocDocumentImpl.setTitle(getTitle());

		vdocDocumentImpl.setContent(getContent());

		vdocDocumentImpl.setProcess(getProcess());

		vdocDocumentImpl.setBase(getBase());

		vdocDocumentImpl.setTime(getTime());

		vdocDocumentImpl.setCost(getCost());

		vdocDocumentImpl.setRequire(getRequire());

		vdocDocumentImpl.setResult(getResult());

		vdocDocumentImpl.setObjects(getObjects());

		vdocDocumentImpl.setStyle(getStyle());

		vdocDocumentImpl.setPosition(getPosition());

		vdocDocumentImpl.setNote(getNote());

		vdocDocumentImpl.setUserHit(getUserHit());

		vdocDocumentImpl.setStatusDoc(getStatusDoc());

		vdocDocumentImpl.setTypeDoc(getTypeDoc());

		vdocDocumentImpl.setHasAttachment(getHasAttachment());

		vdocDocumentImpl.setFieldId(getFieldId());

		vdocDocumentModelImpl._originalFieldId = vdocDocumentModelImpl._fieldId;

		vdocDocumentImpl.setOrgRels(getOrgRels());

		vdocDocumentImpl.setFieldRels(getFieldRels());

		return vdocDocumentImpl;
	}

	public int compareTo(vdocDocument vdocDocument) {
		int value = 0;

		if (getPosition() < vdocDocument.getPosition()) {
			value = -1;
		}
		else if (getPosition() > vdocDocument.getPosition()) {
			value = 1;
		}
		else {
			value = 0;
		}

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		vdocDocument vdocDocument = null;

		try {
			vdocDocument = (vdocDocument)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		String pk = vdocDocument.getPrimaryKey();

		if (getPrimaryKey().equals(pk)) {
			return true;
		}
		else {
			return false;
		}
	}

	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	public String toString() {
		StringBundler sb = new StringBundler(73);

		sb.append("{docId=");
		sb.append(getDocId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", language=");
		sb.append(getLanguage());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", createdByUser=");
		sb.append(getCreatedByUser());
		sb.append(", createdDate=");
		sb.append(getCreatedDate());
		sb.append(", modifiedByUser=");
		sb.append(getModifiedByUser());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", approvedByUser=");
		sb.append(getApprovedByUser());
		sb.append(", approvedDate=");
		sb.append(getApprovedDate());
		sb.append(", publishedByUser=");
		sb.append(getPublishedByUser());
		sb.append(", publishedDate=");
		sb.append(getPublishedDate());
		sb.append(", promulDate=");
		sb.append(getPromulDate());
		sb.append(", effectivedDate=");
		sb.append(getEffectivedDate());
		sb.append(", expiredDate=");
		sb.append(getExpiredDate());
		sb.append(", replaceDoc=");
		sb.append(getReplaceDoc());
		sb.append(", title=");
		sb.append(getTitle());
		sb.append(", content=");
		sb.append(getContent());
		sb.append(", process=");
		sb.append(getProcess());
		sb.append(", base=");
		sb.append(getBase());
		sb.append(", time=");
		sb.append(getTime());
		sb.append(", cost=");
		sb.append(getCost());
		sb.append(", require=");
		sb.append(getRequire());
		sb.append(", result=");
		sb.append(getResult());
		sb.append(", objects=");
		sb.append(getObjects());
		sb.append(", style=");
		sb.append(getStyle());
		sb.append(", position=");
		sb.append(getPosition());
		sb.append(", note=");
		sb.append(getNote());
		sb.append(", userHit=");
		sb.append(getUserHit());
		sb.append(", statusDoc=");
		sb.append(getStatusDoc());
		sb.append(", typeDoc=");
		sb.append(getTypeDoc());
		sb.append(", hasAttachment=");
		sb.append(getHasAttachment());
		sb.append(", fieldId=");
		sb.append(getFieldId());
		sb.append(", orgRels=");
		sb.append(getOrgRels());
		sb.append(", fieldRels=");
		sb.append(getFieldRels());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(112);

		sb.append("<model><model-name>");
		sb.append("com.portlet.vdoc.model.vdocDocument");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>docId</column-name><column-value><![CDATA[");
		sb.append(getDocId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>language</column-name><column-value><![CDATA[");
		sb.append(getLanguage());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdByUser</column-name><column-value><![CDATA[");
		sb.append(getCreatedByUser());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedByUser</column-name><column-value><![CDATA[");
		sb.append(getModifiedByUser());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>approvedByUser</column-name><column-value><![CDATA[");
		sb.append(getApprovedByUser());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>approvedDate</column-name><column-value><![CDATA[");
		sb.append(getApprovedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>publishedByUser</column-name><column-value><![CDATA[");
		sb.append(getPublishedByUser());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>publishedDate</column-name><column-value><![CDATA[");
		sb.append(getPublishedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>promulDate</column-name><column-value><![CDATA[");
		sb.append(getPromulDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>effectivedDate</column-name><column-value><![CDATA[");
		sb.append(getEffectivedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>expiredDate</column-name><column-value><![CDATA[");
		sb.append(getExpiredDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>replaceDoc</column-name><column-value><![CDATA[");
		sb.append(getReplaceDoc());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>title</column-name><column-value><![CDATA[");
		sb.append(getTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>content</column-name><column-value><![CDATA[");
		sb.append(getContent());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>process</column-name><column-value><![CDATA[");
		sb.append(getProcess());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>base</column-name><column-value><![CDATA[");
		sb.append(getBase());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>time</column-name><column-value><![CDATA[");
		sb.append(getTime());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cost</column-name><column-value><![CDATA[");
		sb.append(getCost());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>require</column-name><column-value><![CDATA[");
		sb.append(getRequire());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>result</column-name><column-value><![CDATA[");
		sb.append(getResult());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>objects</column-name><column-value><![CDATA[");
		sb.append(getObjects());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>style</column-name><column-value><![CDATA[");
		sb.append(getStyle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>position</column-name><column-value><![CDATA[");
		sb.append(getPosition());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>note</column-name><column-value><![CDATA[");
		sb.append(getNote());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userHit</column-name><column-value><![CDATA[");
		sb.append(getUserHit());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusDoc</column-name><column-value><![CDATA[");
		sb.append(getStatusDoc());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>typeDoc</column-name><column-value><![CDATA[");
		sb.append(getTypeDoc());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>hasAttachment</column-name><column-value><![CDATA[");
		sb.append(getHasAttachment());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fieldId</column-name><column-value><![CDATA[");
		sb.append(getFieldId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>orgRels</column-name><column-value><![CDATA[");
		sb.append(getOrgRels());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fieldRels</column-name><column-value><![CDATA[");
		sb.append(getFieldRels());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private String _docId;
	private String _originalDocId;
	private long _groupId;
	private String _language;
	private long _companyId;
	private long _userId;
	private String _userUuid;
	private long _createdByUser;
	private Date _createdDate;
	private long _modifiedByUser;
	private Date _modifiedDate;
	private long _approvedByUser;
	private Date _approvedDate;
	private long _publishedByUser;
	private Date _publishedDate;
	private Date _promulDate;
	private Date _effectivedDate;
	private Date _expiredDate;
	private String _replaceDoc;
	private String _title;
	private String _content;
	private String _process;
	private String _base;
	private String _time;
	private String _cost;
	private String _require;
	private String _result;
	private String _objects;
	private String _style;
	private int _position;
	private String _note;
	private int _userHit;
	private int _statusDoc;
	private int _typeDoc;
	private boolean _hasAttachment;
	private String _fieldId;
	private String _originalFieldId;
	private String _orgRels;
	private String _fieldRels;
}