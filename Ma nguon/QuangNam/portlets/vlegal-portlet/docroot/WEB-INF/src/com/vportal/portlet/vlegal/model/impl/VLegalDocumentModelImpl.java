/**
 * Copyright (c) 2000-2011 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.vportal.portlet.vlegal.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.util.PortalUtil;

import com.vportal.portlet.vlegal.model.VLegalDocument;
import com.vportal.portlet.vlegal.model.VLegalDocumentModel;
import com.vportal.portlet.vlegal.model.VLegalDocumentSoap;

import java.io.Serializable;

import java.lang.reflect.Proxy;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 * The base model implementation for the VLegalDocument service. Represents a row in the &quot;VLegalDocument&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.vportal.portlet.vlegal.model.VLegalDocumentModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link VLegalDocumentImpl}.
 * </p>
 *
 * <p>
 * Never modify or reference this class directly. All methods that expect a v legal document model instance should use the {@link com.vportal.portlet.vlegal.model.VLegalDocument} interface instead.
 * </p>
 *
 * @author ACB
 * @see VLegalDocumentImpl
 * @see com.vportal.portlet.vlegal.model.VLegalDocument
 * @see com.vportal.portlet.vlegal.model.VLegalDocumentModel
 * @generated
 */
public class VLegalDocumentModelImpl extends BaseModelImpl<VLegalDocument>
	implements VLegalDocumentModel {
	public static final String TABLE_NAME = "VLegalDocument";
	public static final Object[][] TABLE_COLUMNS = {
			{ "docId", new Integer(Types.VARCHAR) },
			{ "groupId", new Integer(Types.BIGINT) },
			{ "companyId", new Integer(Types.BIGINT) },
			{ "userId", new Integer(Types.BIGINT) },
			{ "createdByUser", new Integer(Types.BIGINT) },
			{ "createdDate", new Integer(Types.TIMESTAMP) },
			{ "modifiedByUser", new Integer(Types.BIGINT) },
			{ "modifiedDate", new Integer(Types.TIMESTAMP) },
			{ "approvedByUser", new Integer(Types.BIGINT) },
			{ "approvedDate", new Integer(Types.TIMESTAMP) },
			{ "forwardedByUser", new Integer(Types.BIGINT) },
			{ "forwardedDate", new Integer(Types.TIMESTAMP) },
			{ "publishedByUser", new Integer(Types.BIGINT) },
			{ "publishedDate", new Integer(Types.TIMESTAMP) },
			{ "symbol", new Integer(Types.VARCHAR) },
			{ "num", new Integer(Types.VARCHAR) },
			{ "promulDate", new Integer(Types.TIMESTAMP) },
			{ "effectivedDate", new Integer(Types.TIMESTAMP) },
			{ "expiredDate", new Integer(Types.TIMESTAMP) },
			{ "replaceDoc", new Integer(Types.VARCHAR) },
			{ "summary", new Integer(Types.VARCHAR) },
			{ "content", new Integer(Types.VARCHAR) },
			{ "language", new Integer(Types.VARCHAR) },
			{ "userHit", new Integer(Types.INTEGER) },
			{ "statusDoc", new Integer(Types.INTEGER) },
			{ "hasAttachment", new Integer(Types.BOOLEAN) },
			{ "typeDocId", new Integer(Types.VARCHAR) },
			{ "fieldId", new Integer(Types.VARCHAR) },
			{ "orgId", new Integer(Types.VARCHAR) },
			{ "orgRels", new Integer(Types.VARCHAR) },
			{ "signerRels", new Integer(Types.VARCHAR) },
			{ "fieldRels", new Integer(Types.VARCHAR) },
			{ "numRels", new Integer(Types.VARCHAR) },
			{ "docCode", new Integer(Types.VARCHAR) },
			{ "departmentRels", new Integer(Types.VARCHAR) }
		};
	public static final String TABLE_SQL_CREATE = "create table VLegalDocument (docId VARCHAR(75) not null primary key,groupId LONG,companyId LONG,userId LONG,createdByUser LONG,createdDate DATE null,modifiedByUser LONG,modifiedDate DATE null,approvedByUser LONG,approvedDate DATE null,forwardedByUser LONG,forwardedDate DATE null,publishedByUser LONG,publishedDate DATE null,symbol VARCHAR(75) null,num VARCHAR(75) null,promulDate DATE null,effectivedDate DATE null,expiredDate DATE null,replaceDoc VARCHAR(75) null,summary VARCHAR(750) null,content TEXT null,language VARCHAR(75) null,userHit INTEGER,statusDoc INTEGER,hasAttachment BOOLEAN,typeDocId VARCHAR(75) null,fieldId VARCHAR(75) null,orgId VARCHAR(75) null,orgRels VARCHAR(75) null,signerRels VARCHAR(75) null,fieldRels VARCHAR(75) null,numRels VARCHAR(75) null,docCode VARCHAR(75) null,departmentRels VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table VLegalDocument";
	public static final String ORDER_BY_JPQL = " ORDER BY vLegalDocument.promulDate DESC";
	public static final String ORDER_BY_SQL = " ORDER BY VLegalDocument.promulDate DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.vportal.portlet.vlegal.model.VLegalDocument"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.vportal.portlet.vlegal.model.VLegalDocument"),
			true);

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static VLegalDocument toModel(VLegalDocumentSoap soapModel) {
		VLegalDocument model = new VLegalDocumentImpl();

		model.setDocId(soapModel.getDocId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setCreatedByUser(soapModel.getCreatedByUser());
		model.setCreatedDate(soapModel.getCreatedDate());
		model.setModifiedByUser(soapModel.getModifiedByUser());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setApprovedByUser(soapModel.getApprovedByUser());
		model.setApprovedDate(soapModel.getApprovedDate());
		model.setForwardedByUser(soapModel.getForwardedByUser());
		model.setForwardedDate(soapModel.getForwardedDate());
		model.setPublishedByUser(soapModel.getPublishedByUser());
		model.setPublishedDate(soapModel.getPublishedDate());
		model.setSymbol(soapModel.getSymbol());
		model.setNum(soapModel.getNum());
		model.setPromulDate(soapModel.getPromulDate());
		model.setEffectivedDate(soapModel.getEffectivedDate());
		model.setExpiredDate(soapModel.getExpiredDate());
		model.setReplaceDoc(soapModel.getReplaceDoc());
		model.setSummary(soapModel.getSummary());
		model.setContent(soapModel.getContent());
		model.setLanguage(soapModel.getLanguage());
		model.setUserHit(soapModel.getUserHit());
		model.setStatusDoc(soapModel.getStatusDoc());
		model.setHasAttachment(soapModel.getHasAttachment());
		model.setTypeDocId(soapModel.getTypeDocId());
		model.setFieldId(soapModel.getFieldId());
		model.setOrgId(soapModel.getOrgId());
		model.setOrgRels(soapModel.getOrgRels());
		model.setSignerRels(soapModel.getSignerRels());
		model.setFieldRels(soapModel.getFieldRels());
		model.setNumRels(soapModel.getNumRels());
		model.setDocCode(soapModel.getDocCode());
		model.setDepartmentRels(soapModel.getDepartmentRels());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<VLegalDocument> toModels(VLegalDocumentSoap[] soapModels) {
		List<VLegalDocument> models = new ArrayList<VLegalDocument>(soapModels.length);

		for (VLegalDocumentSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.vportal.portlet.vlegal.model.VLegalDocument"));

	public VLegalDocumentModelImpl() {
	}

	public String getPrimaryKey() {
		return _docId;
	}

	public void setPrimaryKey(String pk) {
		setDocId(pk);
	}

	public Serializable getPrimaryKeyObj() {
		return _docId;
	}

	public String getDocId() {
		if (_docId == null) {
			return StringPool.BLANK;
		}
		else {
			return _docId;
		}
	}

	public void setDocId(String docId) {
		if (_originalDocId == null) {
			_originalDocId = _docId;
		}

		_docId = docId;
	}

	public String getOriginalDocId() {
		return GetterUtil.getString(_originalDocId);
	}

	public long getGroupId() {
		return _groupId;
	}

	public void setGroupId(long groupId) {
		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	public long getCompanyId() {
		return _companyId;
	}

	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	public long getUserId() {
		return _userId;
	}

	public void setUserId(long userId) {
		_userId = userId;
	}

	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public long getCreatedByUser() {
		return _createdByUser;
	}

	public void setCreatedByUser(long createdByUser) {
		_createdByUser = createdByUser;
	}

	public Date getCreatedDate() {
		return _createdDate;
	}

	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	public long getModifiedByUser() {
		return _modifiedByUser;
	}

	public void setModifiedByUser(long modifiedByUser) {
		_modifiedByUser = modifiedByUser;
	}

	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	public long getApprovedByUser() {
		return _approvedByUser;
	}

	public void setApprovedByUser(long approvedByUser) {
		_approvedByUser = approvedByUser;
	}

	public Date getApprovedDate() {
		return _approvedDate;
	}

	public void setApprovedDate(Date approvedDate) {
		_approvedDate = approvedDate;
	}

	public long getForwardedByUser() {
		return _forwardedByUser;
	}

	public void setForwardedByUser(long forwardedByUser) {
		_forwardedByUser = forwardedByUser;
	}

	public Date getForwardedDate() {
		return _forwardedDate;
	}

	public void setForwardedDate(Date forwardedDate) {
		_forwardedDate = forwardedDate;
	}

	public long getPublishedByUser() {
		return _publishedByUser;
	}

	public void setPublishedByUser(long publishedByUser) {
		_publishedByUser = publishedByUser;
	}

	public Date getPublishedDate() {
		return _publishedDate;
	}

	public void setPublishedDate(Date publishedDate) {
		_publishedDate = publishedDate;
	}

	public String getSymbol() {
		if (_symbol == null) {
			return StringPool.BLANK;
		}
		else {
			return _symbol;
		}
	}

	public void setSymbol(String symbol) {
		if (_originalSymbol == null) {
			_originalSymbol = _symbol;
		}

		_symbol = symbol;
	}

	public String getOriginalSymbol() {
		return GetterUtil.getString(_originalSymbol);
	}

	public String getNum() {
		if (_num == null) {
			return StringPool.BLANK;
		}
		else {
			return _num;
		}
	}

	public void setNum(String num) {
		if (_originalNum == null) {
			_originalNum = _num;
		}

		_num = num;
	}

	public String getOriginalNum() {
		return GetterUtil.getString(_originalNum);
	}

	public Date getPromulDate() {
		return _promulDate;
	}

	public void setPromulDate(Date promulDate) {
		_promulDate = promulDate;
	}

	public Date getEffectivedDate() {
		return _effectivedDate;
	}

	public void setEffectivedDate(Date effectivedDate) {
		_effectivedDate = effectivedDate;
	}

	public Date getExpiredDate() {
		return _expiredDate;
	}

	public void setExpiredDate(Date expiredDate) {
		_expiredDate = expiredDate;
	}

	public String getReplaceDoc() {
		if (_replaceDoc == null) {
			return StringPool.BLANK;
		}
		else {
			return _replaceDoc;
		}
	}

	public void setReplaceDoc(String replaceDoc) {
		_replaceDoc = replaceDoc;
	}

	public String getSummary() {
		if (_summary == null) {
			return StringPool.BLANK;
		}
		else {
			return _summary;
		}
	}

	public void setSummary(String summary) {
		_summary = summary;
	}

	public String getContent() {
		if (_content == null) {
			return StringPool.BLANK;
		}
		else {
			return _content;
		}
	}

	public void setContent(String content) {
		_content = content;
	}

	public String getLanguage() {
		if (_language == null) {
			return StringPool.BLANK;
		}
		else {
			return _language;
		}
	}

	public void setLanguage(String language) {
		_language = language;
	}

	public int getUserHit() {
		return _userHit;
	}

	public void setUserHit(int userHit) {
		_userHit = userHit;
	}

	public int getStatusDoc() {
		return _statusDoc;
	}

	public void setStatusDoc(int statusDoc) {
		_statusDoc = statusDoc;
	}

	public boolean getHasAttachment() {
		return _hasAttachment;
	}

	public boolean isHasAttachment() {
		return _hasAttachment;
	}

	public void setHasAttachment(boolean hasAttachment) {
		_hasAttachment = hasAttachment;
	}

	public String getTypeDocId() {
		if (_typeDocId == null) {
			return StringPool.BLANK;
		}
		else {
			return _typeDocId;
		}
	}

	public void setTypeDocId(String typeDocId) {
		_typeDocId = typeDocId;
	}

	public String getFieldId() {
		if (_fieldId == null) {
			return StringPool.BLANK;
		}
		else {
			return _fieldId;
		}
	}

	public void setFieldId(String fieldId) {
		_fieldId = fieldId;
	}

	public String getOrgId() {
		if (_orgId == null) {
			return StringPool.BLANK;
		}
		else {
			return _orgId;
		}
	}

	public void setOrgId(String orgId) {
		_orgId = orgId;
	}

	public String getOrgRels() {
		if (_orgRels == null) {
			return StringPool.BLANK;
		}
		else {
			return _orgRels;
		}
	}

	public void setOrgRels(String orgRels) {
		_orgRels = orgRels;
	}

	public String getSignerRels() {
		if (_signerRels == null) {
			return StringPool.BLANK;
		}
		else {
			return _signerRels;
		}
	}

	public void setSignerRels(String signerRels) {
		_signerRels = signerRels;
	}

	public String getFieldRels() {
		if (_fieldRels == null) {
			return StringPool.BLANK;
		}
		else {
			return _fieldRels;
		}
	}

	public void setFieldRels(String fieldRels) {
		_fieldRels = fieldRels;
	}

	public String getNumRels() {
		if (_numRels == null) {
			return StringPool.BLANK;
		}
		else {
			return _numRels;
		}
	}

	public void setNumRels(String numRels) {
		_numRels = numRels;
	}

	public String getDocCode() {
		if (_docCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _docCode;
		}
	}

	public void setDocCode(String docCode) {
		_docCode = docCode;
	}

	public String getDepartmentRels() {
		if (_departmentRels == null) {
			return StringPool.BLANK;
		}
		else {
			return _departmentRels;
		}
	}

	public void setDepartmentRels(String departmentRels) {
		_departmentRels = departmentRels;
	}

	public VLegalDocument toEscapedModel() {
		if (isEscapedModel()) {
			return (VLegalDocument)this;
		}
		else {
			return (VLegalDocument)Proxy.newProxyInstance(VLegalDocument.class.getClassLoader(),
				new Class[] { VLegalDocument.class },
				new AutoEscapeBeanHandler(this));
		}
	}

	public Object clone() {
		VLegalDocumentImpl vLegalDocumentImpl = new VLegalDocumentImpl();

		vLegalDocumentImpl.setDocId(getDocId());

		VLegalDocumentModelImpl vLegalDocumentModelImpl = vLegalDocumentImpl;

		vLegalDocumentModelImpl._originalDocId = vLegalDocumentModelImpl._docId;

		vLegalDocumentImpl.setGroupId(getGroupId());

		vLegalDocumentModelImpl._originalGroupId = vLegalDocumentModelImpl._groupId;

		vLegalDocumentModelImpl._setOriginalGroupId = false;
		vLegalDocumentImpl.setCompanyId(getCompanyId());

		vLegalDocumentImpl.setUserId(getUserId());

		vLegalDocumentImpl.setCreatedByUser(getCreatedByUser());

		vLegalDocumentImpl.setCreatedDate(getCreatedDate());

		vLegalDocumentImpl.setModifiedByUser(getModifiedByUser());

		vLegalDocumentImpl.setModifiedDate(getModifiedDate());

		vLegalDocumentImpl.setApprovedByUser(getApprovedByUser());

		vLegalDocumentImpl.setApprovedDate(getApprovedDate());

		vLegalDocumentImpl.setForwardedByUser(getForwardedByUser());

		vLegalDocumentImpl.setForwardedDate(getForwardedDate());

		vLegalDocumentImpl.setPublishedByUser(getPublishedByUser());

		vLegalDocumentImpl.setPublishedDate(getPublishedDate());

		vLegalDocumentImpl.setSymbol(getSymbol());

		vLegalDocumentModelImpl._originalSymbol = vLegalDocumentModelImpl._symbol;

		vLegalDocumentImpl.setNum(getNum());

		vLegalDocumentModelImpl._originalNum = vLegalDocumentModelImpl._num;

		vLegalDocumentImpl.setPromulDate(getPromulDate());

		vLegalDocumentImpl.setEffectivedDate(getEffectivedDate());

		vLegalDocumentImpl.setExpiredDate(getExpiredDate());

		vLegalDocumentImpl.setReplaceDoc(getReplaceDoc());

		vLegalDocumentImpl.setSummary(getSummary());

		vLegalDocumentImpl.setContent(getContent());

		vLegalDocumentImpl.setLanguage(getLanguage());

		vLegalDocumentImpl.setUserHit(getUserHit());

		vLegalDocumentImpl.setStatusDoc(getStatusDoc());

		vLegalDocumentImpl.setHasAttachment(getHasAttachment());

		vLegalDocumentImpl.setTypeDocId(getTypeDocId());

		vLegalDocumentImpl.setFieldId(getFieldId());

		vLegalDocumentImpl.setOrgId(getOrgId());

		vLegalDocumentImpl.setOrgRels(getOrgRels());

		vLegalDocumentImpl.setSignerRels(getSignerRels());

		vLegalDocumentImpl.setFieldRels(getFieldRels());

		vLegalDocumentImpl.setNumRels(getNumRels());

		vLegalDocumentImpl.setDocCode(getDocCode());

		vLegalDocumentImpl.setDepartmentRels(getDepartmentRels());

		return vLegalDocumentImpl;
	}

	public int compareTo(VLegalDocument vLegalDocument) {
		int value = 0;

		value = DateUtil.compareTo(getPromulDate(),
				vLegalDocument.getPromulDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		VLegalDocument vLegalDocument = null;

		try {
			vLegalDocument = (VLegalDocument)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		String pk = vLegalDocument.getPrimaryKey();

		if (getPrimaryKey().equals(pk)) {
			return true;
		}
		else {
			return false;
		}
	}

	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	public String toString() {
		StringBundler sb = new StringBundler(71);

		sb.append("{docId=");
		sb.append(getDocId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", createdByUser=");
		sb.append(getCreatedByUser());
		sb.append(", createdDate=");
		sb.append(getCreatedDate());
		sb.append(", modifiedByUser=");
		sb.append(getModifiedByUser());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", approvedByUser=");
		sb.append(getApprovedByUser());
		sb.append(", approvedDate=");
		sb.append(getApprovedDate());
		sb.append(", forwardedByUser=");
		sb.append(getForwardedByUser());
		sb.append(", forwardedDate=");
		sb.append(getForwardedDate());
		sb.append(", publishedByUser=");
		sb.append(getPublishedByUser());
		sb.append(", publishedDate=");
		sb.append(getPublishedDate());
		sb.append(", symbol=");
		sb.append(getSymbol());
		sb.append(", num=");
		sb.append(getNum());
		sb.append(", promulDate=");
		sb.append(getPromulDate());
		sb.append(", effectivedDate=");
		sb.append(getEffectivedDate());
		sb.append(", expiredDate=");
		sb.append(getExpiredDate());
		sb.append(", replaceDoc=");
		sb.append(getReplaceDoc());
		sb.append(", summary=");
		sb.append(getSummary());
		sb.append(", content=");
		sb.append(getContent());
		sb.append(", language=");
		sb.append(getLanguage());
		sb.append(", userHit=");
		sb.append(getUserHit());
		sb.append(", statusDoc=");
		sb.append(getStatusDoc());
		sb.append(", hasAttachment=");
		sb.append(getHasAttachment());
		sb.append(", typeDocId=");
		sb.append(getTypeDocId());
		sb.append(", fieldId=");
		sb.append(getFieldId());
		sb.append(", orgId=");
		sb.append(getOrgId());
		sb.append(", orgRels=");
		sb.append(getOrgRels());
		sb.append(", signerRels=");
		sb.append(getSignerRels());
		sb.append(", fieldRels=");
		sb.append(getFieldRels());
		sb.append(", numRels=");
		sb.append(getNumRels());
		sb.append(", docCode=");
		sb.append(getDocCode());
		sb.append(", departmentRels=");
		sb.append(getDepartmentRels());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(109);

		sb.append("<model><model-name>");
		sb.append("com.vportal.portlet.vlegal.model.VLegalDocument");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>docId</column-name><column-value><![CDATA[");
		sb.append(getDocId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdByUser</column-name><column-value><![CDATA[");
		sb.append(getCreatedByUser());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedByUser</column-name><column-value><![CDATA[");
		sb.append(getModifiedByUser());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>approvedByUser</column-name><column-value><![CDATA[");
		sb.append(getApprovedByUser());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>approvedDate</column-name><column-value><![CDATA[");
		sb.append(getApprovedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>forwardedByUser</column-name><column-value><![CDATA[");
		sb.append(getForwardedByUser());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>forwardedDate</column-name><column-value><![CDATA[");
		sb.append(getForwardedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>publishedByUser</column-name><column-value><![CDATA[");
		sb.append(getPublishedByUser());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>publishedDate</column-name><column-value><![CDATA[");
		sb.append(getPublishedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>symbol</column-name><column-value><![CDATA[");
		sb.append(getSymbol());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>num</column-name><column-value><![CDATA[");
		sb.append(getNum());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>promulDate</column-name><column-value><![CDATA[");
		sb.append(getPromulDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>effectivedDate</column-name><column-value><![CDATA[");
		sb.append(getEffectivedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>expiredDate</column-name><column-value><![CDATA[");
		sb.append(getExpiredDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>replaceDoc</column-name><column-value><![CDATA[");
		sb.append(getReplaceDoc());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>summary</column-name><column-value><![CDATA[");
		sb.append(getSummary());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>content</column-name><column-value><![CDATA[");
		sb.append(getContent());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>language</column-name><column-value><![CDATA[");
		sb.append(getLanguage());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userHit</column-name><column-value><![CDATA[");
		sb.append(getUserHit());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusDoc</column-name><column-value><![CDATA[");
		sb.append(getStatusDoc());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>hasAttachment</column-name><column-value><![CDATA[");
		sb.append(getHasAttachment());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>typeDocId</column-name><column-value><![CDATA[");
		sb.append(getTypeDocId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fieldId</column-name><column-value><![CDATA[");
		sb.append(getFieldId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>orgId</column-name><column-value><![CDATA[");
		sb.append(getOrgId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>orgRels</column-name><column-value><![CDATA[");
		sb.append(getOrgRels());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>signerRels</column-name><column-value><![CDATA[");
		sb.append(getSignerRels());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fieldRels</column-name><column-value><![CDATA[");
		sb.append(getFieldRels());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>numRels</column-name><column-value><![CDATA[");
		sb.append(getNumRels());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>docCode</column-name><column-value><![CDATA[");
		sb.append(getDocCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>departmentRels</column-name><column-value><![CDATA[");
		sb.append(getDepartmentRels());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private String _docId;
	private String _originalDocId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _userId;
	private String _userUuid;
	private long _createdByUser;
	private Date _createdDate;
	private long _modifiedByUser;
	private Date _modifiedDate;
	private long _approvedByUser;
	private Date _approvedDate;
	private long _forwardedByUser;
	private Date _forwardedDate;
	private long _publishedByUser;
	private Date _publishedDate;
	private String _symbol;
	private String _originalSymbol;
	private String _num;
	private String _originalNum;
	private Date _promulDate;
	private Date _effectivedDate;
	private Date _expiredDate;
	private String _replaceDoc;
	private String _summary;
	private String _content;
	private String _language;
	private int _userHit;
	private int _statusDoc;
	private boolean _hasAttachment;
	private String _typeDocId;
	private String _fieldId;
	private String _orgId;
	private String _orgRels;
	private String _signerRels;
	private String _fieldRels;
	private String _numRels;
	private String _docCode;
	private String _departmentRels;
}